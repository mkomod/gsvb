// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gsvb_types.h"
#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fit_linear
Rcpp::List fit_linear(vec y, mat X, uvec groups, const double lambda, const double a0, const double b0, const double tau_a0, const double tau_b0, vec mu, vec s, vec g, bool diag_cov, bool track_elbo, const uword track_elbo_every, const uword track_elbo_mcn, unsigned int niter, double tol, bool verbose, const uword ordering);
RcppExport SEXP _gsvb_fit_linear(SEXP ySEXP, SEXP XSEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP tau_a0SEXP, SEXP tau_b0SEXP, SEXP muSEXP, SEXP sSEXP, SEXP gSEXP, SEXP diag_covSEXP, SEXP track_elboSEXP, SEXP track_elbo_everySEXP, SEXP track_elbo_mcnSEXP, SEXP niterSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP orderingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double >::type tau_a0(tau_a0SEXP);
    Rcpp::traits::input_parameter< const double >::type tau_b0(tau_b0SEXP);
    Rcpp::traits::input_parameter< vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type diag_cov(diag_covSEXP);
    Rcpp::traits::input_parameter< bool >::type track_elbo(track_elboSEXP);
    Rcpp::traits::input_parameter< const uword >::type track_elbo_every(track_elbo_everySEXP);
    Rcpp::traits::input_parameter< const uword >::type track_elbo_mcn(track_elbo_mcnSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const uword >::type ordering(orderingSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_linear(y, X, groups, lambda, a0, b0, tau_a0, tau_b0, mu, s, g, diag_cov, track_elbo, track_elbo_every, track_elbo_mcn, niter, tol, verbose, ordering));
    return rcpp_result_gen;
END_RCPP
}
// elbo_linear_c
double elbo_linear_c(const double yty, const vec& yx, const mat& xtx, const uvec& groups, const uword n, const uword p, const vec& mu, const vec& s, const vec& g, const double tau_a, const double tau_b, const double lambda, const double a0, const double b0, const double tau_a0, const double tau_b0, const uword mcn, const bool approx, const double approx_thresh);
RcppExport SEXP _gsvb_elbo_linear_c(SEXP ytySEXP, SEXP yxSEXP, SEXP xtxSEXP, SEXP groupsSEXP, SEXP nSEXP, SEXP pSEXP, SEXP muSEXP, SEXP sSEXP, SEXP gSEXP, SEXP tau_aSEXP, SEXP tau_bSEXP, SEXP lambdaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP tau_a0SEXP, SEXP tau_b0SEXP, SEXP mcnSEXP, SEXP approxSEXP, SEXP approx_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type yty(ytySEXP);
    Rcpp::traits::input_parameter< const vec& >::type yx(yxSEXP);
    Rcpp::traits::input_parameter< const mat& >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< const uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_a(tau_aSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_b(tau_bSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double >::type tau_a0(tau_a0SEXP);
    Rcpp::traits::input_parameter< const double >::type tau_b0(tau_b0SEXP);
    Rcpp::traits::input_parameter< const uword >::type mcn(mcnSEXP);
    Rcpp::traits::input_parameter< const bool >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< const double >::type approx_thresh(approx_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(elbo_linear_c(yty, yx, xtx, groups, n, p, mu, s, g, tau_a, tau_b, lambda, a0, b0, tau_a0, tau_b0, mcn, approx, approx_thresh));
    return rcpp_result_gen;
END_RCPP
}
// elbo_linear_u
double elbo_linear_u(const double yty, const vec& yx, const mat& xtx, const uvec& groups, const uword n, const uword p, const vec& mu, const std::vector<mat>& Ss, const vec& g, const double tau_a, const double tau_b, const double lambda, const double a0, const double b0, const double tau_a0, const double tau_b0, const uword mcn, const bool approx, const double approx_thresh);
RcppExport SEXP _gsvb_elbo_linear_u(SEXP ytySEXP, SEXP yxSEXP, SEXP xtxSEXP, SEXP groupsSEXP, SEXP nSEXP, SEXP pSEXP, SEXP muSEXP, SEXP SsSEXP, SEXP gSEXP, SEXP tau_aSEXP, SEXP tau_bSEXP, SEXP lambdaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP tau_a0SEXP, SEXP tau_b0SEXP, SEXP mcnSEXP, SEXP approxSEXP, SEXP approx_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type yty(ytySEXP);
    Rcpp::traits::input_parameter< const vec& >::type yx(yxSEXP);
    Rcpp::traits::input_parameter< const mat& >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< const uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<mat>& >::type Ss(SsSEXP);
    Rcpp::traits::input_parameter< const vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_a(tau_aSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_b(tau_bSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double >::type tau_a0(tau_a0SEXP);
    Rcpp::traits::input_parameter< const double >::type tau_b0(tau_b0SEXP);
    Rcpp::traits::input_parameter< const uword >::type mcn(mcnSEXP);
    Rcpp::traits::input_parameter< const bool >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< const double >::type approx_thresh(approx_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(elbo_linear_u(yty, yx, xtx, groups, n, p, mu, Ss, g, tau_a, tau_b, lambda, a0, b0, tau_a0, tau_b0, mcn, approx, approx_thresh));
    return rcpp_result_gen;
END_RCPP
}
// fit_logistic
Rcpp::List fit_logistic(vec y, mat X, uvec groups, const double lambda, const double a0, const double b0, vec mu, vec s, vec g, const bool diag_cov, bool track_elbo, const uword track_elbo_every, const uword track_elbo_mcn, const double thresh, const int l, unsigned int niter, unsigned int alg, double tol, bool verbose);
RcppExport SEXP _gsvb_fit_logistic(SEXP ySEXP, SEXP XSEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP muSEXP, SEXP sSEXP, SEXP gSEXP, SEXP diag_covSEXP, SEXP track_elboSEXP, SEXP track_elbo_everySEXP, SEXP track_elbo_mcnSEXP, SEXP threshSEXP, SEXP lSEXP, SEXP niterSEXP, SEXP algSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag_cov(diag_covSEXP);
    Rcpp::traits::input_parameter< bool >::type track_elbo(track_elboSEXP);
    Rcpp::traits::input_parameter< const uword >::type track_elbo_every(track_elbo_everySEXP);
    Rcpp::traits::input_parameter< const uword >::type track_elbo_mcn(track_elbo_mcnSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< const int >::type l(lSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type alg(algSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_logistic(y, X, groups, lambda, a0, b0, mu, s, g, diag_cov, track_elbo, track_elbo_every, track_elbo_mcn, thresh, l, niter, alg, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// elbo_logistic
double elbo_logistic(const vec& y, const mat& X, const uvec& groups, const vec& mu, const vec& s, const vec& g, const std::vector<mat>& Ss, const double lambda, const double w, const uword mcn, const bool diag);
RcppExport SEXP _gsvb_elbo_logistic(SEXP ySEXP, SEXP XSEXP, SEXP groupsSEXP, SEXP muSEXP, SEXP sSEXP, SEXP gSEXP, SEXP SsSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP mcnSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const std::vector<mat>& >::type Ss(SsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const uword >::type mcn(mcnSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(elbo_logistic(y, X, groups, mu, s, g, Ss, lambda, w, mcn, diag));
    return rcpp_result_gen;
END_RCPP
}
// fit_poisson
Rcpp::List fit_poisson(vec y, mat X, uvec groups, const double lambda, const double a0, const double b0, vec mu, vec s, vec g, const bool diag_cov, bool track_elbo, const uword track_elbo_every, const uword track_elbo_mcn, unsigned int niter, double tol, bool verbose);
RcppExport SEXP _gsvb_fit_poisson(SEXP ySEXP, SEXP XSEXP, SEXP groupsSEXP, SEXP lambdaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP muSEXP, SEXP sSEXP, SEXP gSEXP, SEXP diag_covSEXP, SEXP track_elboSEXP, SEXP track_elbo_everySEXP, SEXP track_elbo_mcnSEXP, SEXP niterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const bool >::type diag_cov(diag_covSEXP);
    Rcpp::traits::input_parameter< bool >::type track_elbo(track_elboSEXP);
    Rcpp::traits::input_parameter< const uword >::type track_elbo_every(track_elbo_everySEXP);
    Rcpp::traits::input_parameter< const uword >::type track_elbo_mcn(track_elbo_mcnSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_poisson(y, X, groups, lambda, a0, b0, mu, s, g, diag_cov, track_elbo, track_elbo_every, track_elbo_mcn, niter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// elbo_poisson
double elbo_poisson(const vec& y, const mat& X, const uvec& groups, const vec& mu, const vec& s, const vec& g, const double lambda, const double w, const uword mcn);
RcppExport SEXP _gsvb_elbo_poisson(SEXP ySEXP, SEXP XSEXP, SEXP groupsSEXP, SEXP muSEXP, SEXP sSEXP, SEXP gSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP mcnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const uword >::type mcn(mcnSEXP);
    rcpp_result_gen = Rcpp::wrap(elbo_poisson(y, X, groups, mu, s, g, lambda, w, mcn));
    return rcpp_result_gen;
END_RCPP
}
// pois_update_mu_S
vec pois_update_mu_S(const vec& yX_G, const mat& X_G, const vec& mu_G, const mat& U, const double lambda, const vec& P);
RcppExport SEXP _gsvb_pois_update_mu_S(SEXP yX_GSEXP, SEXP X_GSEXP, SEXP mu_GSEXP, SEXP USEXP, SEXP lambdaSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type yX_G(yX_GSEXP);
    Rcpp::traits::input_parameter< const mat& >::type X_G(X_GSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu_G(mu_GSEXP);
    Rcpp::traits::input_parameter< const mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const vec& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_update_mu_S(yX_G, X_G, mu_G, U, lambda, P));
    return rcpp_result_gen;
END_RCPP
}
// pois_update_U
vec pois_update_U(const mat& X_G, const vec& mu_G, const mat& U, const double lambda, const vec& P);
RcppExport SEXP _gsvb_pois_update_U(SEXP X_GSEXP, SEXP mu_GSEXP, SEXP USEXP, SEXP lambdaSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X_G(X_GSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu_G(mu_GSEXP);
    Rcpp::traits::input_parameter< const mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const vec& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_update_U(X_G, mu_G, U, lambda, P));
    return rcpp_result_gen;
END_RCPP
}
// pois_update_g_S
double pois_update_g_S(const vec& yX_G, const mat& X_G, const vec& mu_G, const mat& U, const mat& S, const double lambda, const double w, const vec& P);
RcppExport SEXP _gsvb_pois_update_g_S(SEXP yX_GSEXP, SEXP X_GSEXP, SEXP mu_GSEXP, SEXP USEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type yX_G(yX_GSEXP);
    Rcpp::traits::input_parameter< const mat& >::type X_G(X_GSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu_G(mu_GSEXP);
    Rcpp::traits::input_parameter< const mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const vec& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_update_g_S(yX_G, X_G, mu_G, U, S, lambda, w, P));
    return rcpp_result_gen;
END_RCPP
}
// elbo_poisson_S
double elbo_poisson_S(const vec& y, const mat& X, const uvec& groups, const vec& mu, const std::vector<mat>& Ss, const vec& g, const double lambda, const double w, const uword mcn);
RcppExport SEXP _gsvb_elbo_poisson_S(SEXP ySEXP, SEXP XSEXP, SEXP groupsSEXP, SEXP muSEXP, SEXP SsSEXP, SEXP gSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP mcnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<mat>& >::type Ss(SsSEXP);
    Rcpp::traits::input_parameter< const vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const uword >::type mcn(mcnSEXP);
    rcpp_result_gen = Rcpp::wrap(elbo_poisson_S(y, X, groups, mu, Ss, g, lambda, w, mcn));
    return rcpp_result_gen;
END_RCPP
}
// mvnMGF
vec mvnMGF(const mat& X, const vec& mu, const mat& S);
RcppExport SEXP _gsvb_mvnMGF(SEXP XSEXP, SEXP muSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnMGF(X, mu, S));
    return rcpp_result_gen;
END_RCPP
}
// mvnMGF_chol
vec mvnMGF_chol(const mat& X, const vec& mu, const mat& U);
RcppExport SEXP _gsvb_mvnMGF_chol(SEXP XSEXP, SEXP muSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const mat& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(mvnMGF_chol(X, mu, U));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gsvb_fit_linear", (DL_FUNC) &_gsvb_fit_linear, 19},
    {"_gsvb_elbo_linear_c", (DL_FUNC) &_gsvb_elbo_linear_c, 19},
    {"_gsvb_elbo_linear_u", (DL_FUNC) &_gsvb_elbo_linear_u, 19},
    {"_gsvb_fit_logistic", (DL_FUNC) &_gsvb_fit_logistic, 19},
    {"_gsvb_elbo_logistic", (DL_FUNC) &_gsvb_elbo_logistic, 11},
    {"_gsvb_fit_poisson", (DL_FUNC) &_gsvb_fit_poisson, 16},
    {"_gsvb_elbo_poisson", (DL_FUNC) &_gsvb_elbo_poisson, 9},
    {"_gsvb_pois_update_mu_S", (DL_FUNC) &_gsvb_pois_update_mu_S, 6},
    {"_gsvb_pois_update_U", (DL_FUNC) &_gsvb_pois_update_U, 5},
    {"_gsvb_pois_update_g_S", (DL_FUNC) &_gsvb_pois_update_g_S, 8},
    {"_gsvb_elbo_poisson_S", (DL_FUNC) &_gsvb_elbo_poisson_S, 9},
    {"_gsvb_mvnMGF", (DL_FUNC) &_gsvb_mvnMGF, 3},
    {"_gsvb_mvnMGF_chol", (DL_FUNC) &_gsvb_mvnMGF_chol, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gsvb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
